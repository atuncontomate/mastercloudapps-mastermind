@startuml
class Mastermind {
    - State state;
    - Map<StateValue, Controller> controllers;

    + Mastermind()
    + void play()

    + {static} void main(String[] args)
}

package controllers {

    abstract class Controller {
        # Board board;
        # State state;

        + Controller(Board board, State state)
        + {abstract} void control()
    }

    class StartController extends Controller{
        + void control()
    }

    class ProposalController extends Controller{
        + void control()
    }

    class ResumeController extends Controller{
        + void control()
    }
}

package views {
    class StartView
    class BoardView
    class ResumeView
    class ProposedCombinationView
    class ResultView
}

package models {

    class Board {
        - ProposedCombination[] proposedCombinations
        - SecretCombination secretCombination
        - Result[] results
        - int attempts

        + Board()
        + void clear()
        + void add(ProposedCombination proposedCombination)
        + boolean isEndedGame()
        + boolean isBreakerWinner()
        + ProposedCombination getAttemptProposedCombination(int attempt)
        + Result getAttemptResult(int attempt)
        + int getAttempts()
    }

    abstract class Combination {
        # List<Color> colors
        # Combination ()
        + List<Color> getColors()
        + static int getWidth()
    }

    class ProposedCombination extends Combination {
        + void add(Color color)
    }

    class SecretCombination extends Combination {
        + SecretCombination()
        + Result getResult(Combination proposedCombination)
    }

    class Result {
        - int blacks
        - int whites
        + Result(int blacks, int whites)
        + boolean isWinnerResult()
        + int getBlacks()
        + int getWhites()
    }

    class State {
        - StateValue stateValue;
        + State()
        + void reset()
        + void next()
        + StateValue getValueState()
    }

    enum Color
    enum StateValue

    Board *--> ProposedCombination
    Board *--> SecretCombination
    Board *--> Result

    Result ...> Combination

    Combination o--> Color
    State ---> StateValue
}

Mastermind *--> Board
Mastermind *--> State
Mastermind *--> Controller

Controller ---> Board
Controller ---> State

StartController ...> StartView
ProposalController ...> BoardView
ProposalController ...> ProposedCombinationView
ResumeController ...> ResumeView

BoardView ---> Board
BoardView ...> ProposedCombinationView
BoardView ...> ResultView

ProposedCombinationView ---> ProposedCombination
ResultView ---> Result

@enduml
