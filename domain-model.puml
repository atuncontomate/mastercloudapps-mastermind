@startuml
class MasterMind {
    - Board board
    - Turn turn

    - void play()
    - void playGame()
    - boolean isResumedGame()
    + {static} void main(String[] args)
}

class Board {
    - final int NUMBER_RESULTS
    - Result[] results
    - int lastResult

    + Board(int numResults)

    + void putResult(Result result)
    + Result getLastResult()
    + boolean isEndedGame()
    + boolean isBreakerWinner()
    + void increaseLastResult()
    + void write()
    + void writeWinner()
}

class Turn {
    - {static} final int NUMBER_PLAYERS
    - Player[] players
    - int activePlayer

    + Turn(Board board)

    + void play()
    + Player getActivePlayer()
}

class Result {
    - Combination combination
    - Success[] hits
    - int order

    + Result(int order)

    + void putHits(Success[] hits)
    + boolean emptyCombination()
    + Combination getCombination()
    + int getOrder()
    + boolean isWinnerResult()
    + void writeNumberBlackSuccess()
    + void writeNumberWhiteSuccess()
}


abstract class Player {
    # Board board;

    + Player(Board board)

    + void play()
    abstract Result getResult()
}

class BreakerPlayer extends Player{
    + Result getResult()
}

class MakerPlayer extends Player{
    - Combination secretCombination
    + Result getResult()
}

class Combination {
    + {static} final int COMBINATION_LENGTH
    - {static} final String EMPTY_COMBINATION
    - {static} final String PROPOSE_COMBINATION
    - String content;

    + Combination()
    + Combination(String content)

    + Success[] getCombinationHits(Combination proposedCombination)
    + {static} Combination random()
    + boolean isEmpty()
    + boolean isValid()
    + void read()
    + void write()
}

enum Success {
	BLACK
	WHITE
	NULL_SUCCESS

	+ boolean isNull()
}
enum Color {
	RED
	BLUE
	YELLOW
	GREEN
	ORANGE
	PINK
	NULL_COLOR

	- char symbol

	Color(char symbol)

	+ {static} Color valueOfColorSymbol
}

enum Error {
	WRONG_LENGTH
	WRONG_COLORS
	NULL_ERROR

	- String message;

	Error()
	Error(String message)

	void writeln()
}

enum Message {
    TITTLE
    ATTEMPTS
    POSITIONS_SAMPLE
    COMBINATION_HITS_SEPARATOR
    BLACKS_AND
    WHITES
    BREAKER_WON
    BREAKER_LOST
    RESUME
    NULL_MESSAGE

    - String message;

    Message()
    Message(String message)

    void write()
    void writeln()
}

class Console
class YesNoDialog

MasterMind *--> Board
MasterMind *--> Turn
MasterMind ...> YesNoDialog
MakerPlayer ...> Message

Board *--> "10" Result
Board ...> Console
Board ...> Message

Turn *--> "2" Player
Turn ...> Message

Result *--> "1" Combination
Result *--> "4" Sucess
Result ...> Console

Player ---> "1" Board
MakerPlayer *--> "1" Combination
MakerPlayer ...> Success

Combination ...> Console
Combination ...> Color
Combination ...> Error

@enduml